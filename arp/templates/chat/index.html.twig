{# templates/chat/index.html.twig #}
{% extends 'base.html.twig' %}

{% block title %}Chat privé{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .message {
            background-color: #f0f0f0;
            padding: 10px;
            margin-bottom: 8px;
            border-radius: 5px;
        }
        .message-form {
            display: flex;
            gap: 10px;
            margin-top: 20px;
        }
        .message-input {
            flex-grow: 1;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        .chat-container {
            max-width: 800px;
            margin: 20px auto;
            padding: 15px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .messages {
            max-height: 400px;
            overflow-y: auto;
            padding: 10px;
            border: 1px solid #eee;
            border-radius: 4px;
            margin-bottom: 15px;
        }
        .timestamp {
            color: #777;
            font-size: 0.8em;
            margin-left: 10px;
        }
        .username-readonly {
            background-color: #f5f5f5;
            cursor: not-allowed;
        }

        .message-pending {
        opacity: 0.7;
        border-left: 3px solid #ffc107; /* Jaune pour indiquer "en attente" */
        }

        .message-error {
        border-left: 3px solid #dc3545; /* Rouge pour indiquer "erreur" */
        }

        .message-error-info {
        color: #dc3545;
        font-size: 0.8em;
        margin-top: 5px;
        }
    </style>
{% endblock %}

{% block body %}
    <div class="chat-container" data-room-id="{{ roomId }}" data-mercure-url="{{ mercure_public_url }}">
        <h1>Chat privé - Room {{ roomId }}</h1>
       
        <div class="messages" id="messages">
            {% for message in messages %}
                <div class="message">
                    <strong>{{ message.sender }}</strong>
                    <span class="timestamp">{{ message.timestamp|date('Y-m-d H:i:s') }}</span>
                    <p>{{ message.content }}</p>
                </div>
            {% endfor %}
        </div>

        <form action="{{ path('chat_send', {roomId: roomId}) }}" method="post" class="message-form" data-ajax="true">
           <input type="text" name="username" id="chat-username" value="{{ userName }}" class="message-input {% if hasUsername %}username-readonly{% endif %}" placeholder="Votre nom" required {% if hasUsername %}readonly{% endif %}>
            <input type="text" name="message" id="chat-message" class="message-input" placeholder="Votre message" required>
            <button type="submit" class="btn btn-primary">Envoyer</button>
        </form>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        // Fonction globale pour l'initialisation Mercure
       window.initMercure = function(roomId, mercureUrl) {
    const messagesDiv = document.getElementById('messages');
    if (!messagesDiv || !roomId || !mercureUrl) return;

    // Ferme les anciennes connexions si besoin
    if (window.currentEventSource) {
        window.currentEventSource.close();
    }

    const url = new URL(mercureUrl);
    url.searchParams.append('topic', '/chat/' + roomId);

    const eventSource = new EventSource(url);
    window.currentEventSource = eventSource;

    eventSource.onmessage = function(event) {
        const data = JSON.parse(event.data);
        
        // Vérifier si le message reçu n'est pas déjà affiché 
        // (pour éviter les doublons avec l'affichage optimiste)
        const pendingMessages = document.querySelectorAll('.message-pending');
        let isDuplicate = false;
        
        pendingMessages.forEach(pendingMsg => {
            const content = pendingMsg.querySelector('p')?.textContent;
            const sender = pendingMsg.querySelector('strong')?.textContent;
            
            if (content === data.content && sender === data.sender) {
                // C'est probablement notre message qui revient de Mercure
                // On remplace le message temporaire par celui-ci
                pendingMsg.classList.remove('message-pending');
                pendingMsg.querySelector('.timestamp').textContent = data.timestamp;
                isDuplicate = true;
            }
        });
        
        // Si ce n'est pas un doublon, ajouter normalement
        if (!isDuplicate) {
            const messageDiv = document.createElement('div');
            messageDiv.className = 'message';
            messageDiv.innerHTML = `<strong>${data.sender}</strong>
                <span class="timestamp">${data.timestamp}</span>
                <p>${data.content}</p>`;
            messagesDiv.appendChild(messageDiv);
        }
        
        // Auto-scroll vers le bas des messages
        messagesDiv.scrollTop = messagesDiv.scrollHeight;
    };
};

        document.addEventListener('DOMContentLoaded', function() {
            // Initialisation automatique en pleine page
            var chatContainer = document.querySelector('.chat-container');
            if (chatContainer) {
                var roomId = chatContainer.getAttribute('data-room-id');
                var mercureUrl = chatContainer.getAttribute('data-mercure-url');
                if (roomId && mercureUrl) {
                    window.initMercure(roomId, mercureUrl);
                }
            }

            // Synchronisation bidirectionnelle avec localStorage
            const usernameField = document.getElementById('chat-username');
            if (usernameField) {
                // Si le champ est vide, essayer de remplir depuis localStorage
                if (usernameField.value === '') {
                    const savedName = localStorage.getItem('chat_user_name');
                    if (savedName) {
                        usernameField.value = savedName;
                    }
                } 
                // Si le champ a une valeur, la sauvegarder dans localStorage
                else if (usernameField.value) {
                    localStorage.setItem('chat_user_name', usernameField.value);
                    
                    // Si username est défini, rendre le champ readonly
                    usernameField.readOnly = true;
                    usernameField.classList.add('username-readonly');
                }
            }

           // Gestion du formulaire en AJAX avec affichage immédiat
const form = document.querySelector('.message-form');
if (form) {
    form.addEventListener('submit', function(e) {
        e.preventDefault();
        
        // Récupération des valeurs
        const username = document.getElementById('chat-username').value;
        const message = document.getElementById('chat-message').value;
        
        if (username && message) {
            // 1. AFFICHAGE IMMÉDIAT DU MESSAGE
            const messagesContainer = document.getElementById('messages');
            if (messagesContainer) {
                const now = new Date();
                const timestamp = now.toLocaleTimeString();
                
                const messageHTML = `
                    <div class="message message-pending">
                        <strong>${username}</strong>
                        <span class="timestamp">${timestamp}</span>
                        <p>${message}</p>
                    </div>
                `;
                messagesContainer.insertAdjacentHTML('beforeend', messageHTML);
                
                // Auto-scroll
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            }
            
            // Sauvegarder le nom d'utilisateur
            if (username) {
                localStorage.setItem('chat_user_name', username);
                
                // Rendre le champ username readonly après le premier message
                const usernameField = document.getElementById('chat-username');
                usernameField.readOnly = true;
                usernameField.classList.add('username-readonly');
            }
            
            // 2. ENVOI AU SERVEUR
            const formData = new FormData(form);
            fetch(form.action, {
                method: 'POST',
                body: formData,
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            }).then(response => {
                // Réinitialiser uniquement le champ message
                document.getElementById('chat-message').value = '';
                document.getElementById('chat-message').focus();
                
                // Si la requête échoue, marquer le message comme non envoyé
                if (!response.ok) {
                    const pendingMessage = document.querySelector('.message-pending');
                    if (pendingMessage) {
                        pendingMessage.classList.add('message-error');
                        pendingMessage.insertAdjacentHTML('beforeend', 
                            '<div class="message-error-info">⚠️ Erreur d\'envoi</div>');
                    }
                } else {
                    // Succès - retirer la classe "pending"
                    const pendingMessage = document.querySelector('.message-pending');
                    if (pendingMessage) {
                        pendingMessage.classList.remove('message-pending');
                    }
                }
            }).catch(error => {
                console.error("Erreur d'envoi:", error);
                // Marquer le message comme non envoyé
                const pendingMessage = document.querySelector('.message-pending');
                if (pendingMessage) {
                    pendingMessage.classList.add('message-error');
                    pendingMessage.insertAdjacentHTML('beforeend', 
                        '<div class="message-error-info">⚠️ Erreur réseau</div>');
                }
            });
        }
    });
}
            
            // Auto-scroll vers le bas des messages au chargement
            const messagesDiv = document.getElementById('messages');
            if (messagesDiv) {
                messagesDiv.scrollTop = messagesDiv.scrollHeight;
            }
        });
    </script>
{% endblock %}